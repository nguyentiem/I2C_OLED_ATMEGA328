;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;#include <stdlib.h>
;#define     ADC0        0
;#define		ADC1		1
;#define		ADC2		2
;#define		ADC3		3
;#define		ADC4		4
;#define		ADC5		5
;
;#define WIDTH 128
;#define HEIGHT 64
;#define WIRE_MAX 32
;#define addr_oled 0x78
;#define TW_START 0x08 // start
;#define  TW_REP_START  0x10    // repeat start
;#define  TW_MT_SLA_ACK 0x18   // truyen slave addr de ghi co ack
;#define  TW_MT_SLA_NACK 0x20 //  truyen slave addr de ghi  ko co ack
;#define  TW_MR_SLA_ACK 0x40   // truyen slave addr de doc co ack
;#define  TW_MT_DATA_ACK 0x28 // gui dl co ack
;#define  TW_MT_DATA_NACK 0x30  // nhan dl khong co ack
;#define SSD1306_COLUMNADDR          0x21 ///< See datasheet
;#define SSD1306_PAGEADDR            0x22        ///< See datasheet
;char data;
;char flag =0 ;
;int temp;
;unsigned char logo_bmp[] =
;{ 0x00,0x00,0x00,0x00,0x00,0x00,
;  0x00,0x00,0x1f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3e,0x6f,0xe4,0xf0,
;  0x00,0x00,0x3e,0xa7,0x20,0xf0,
;  0x00,0x40,0x3e,0x0b,0x21,0xf0,
;  0x01,0xf0,0x3e,0x83,0x20,0xf0,
;  0x00,0xe0,0x3e,0x53,0x64,0xf0,
;  0x00,0xe0,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xef,0xf0,
;  0x00,0x00,0x3f,0xfc,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0x5f,0xf0,
;  0x00,0x00,0x3f,0xef,0xbf,0xf0,
;  0x00,0x00,0x3f,0xff,0xbf,0xf0,
;  0x00,0x00,0x3f,0x73,0xef,0xf0,
;  0x00,0x00,0x3d,0xdb,0xff,0xf0,
;  0x00,0x00,0x3b,0x7e,0xff,0xf0,
;  0x00,0x00,0x0d,0xfd,0xff,0xf0,
;  0x00,0x00,0x1b,0xef,0xff,0xf0,
;  0x00,0x00,0x6f,0xfb,0xff,0xf0,
;  0x00,0x00,0xbf,0xdf,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xaf,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0x5f,0xff,0xf0,
;  0x00,0x00,0x3f,0xbf,0xff,0xf0,
;  0x00,0x00,0x3e,0xff,0xff,0xf0,
;  0x00,0x00,0xef,0xef,0xff,0xf0,
;  0x00,0x00,0xfc,0xff,0xff,0xf0,
;  0x00,0x01,0x3f,0xff,0xff,0xf0,
;  0x00,0x14,0x39,0xff,0xff,0xf0,
;  0x00,0x18,0x3b,0xff,0xff,0xf0,
;  0x00,0x30,0x37,0xff,0xff,0xf0,
;  0x00,0x10,0x37,0xff,0xff,0xf0,
;  0x00,0x00,0x2f,0xff,0xff,0xf0,
;  0x00,0x00,0x0f,0xff,0xff,0xf0,
;  0x00,0x00,0x1f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x10,0x3f,0xff,0xff,0xf0,
;  0x00,0x30,0x3f,0xff,0xff,0xf0,
;  0x00,0x38,0x3f,0xff,0xff,0xf0,
;  0x00,0x18,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x01,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0xef,0xff,0xff,0xf0,
;  0x00,0x00,0xef,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x3f,0xff,0xff,0xf0,
;  0x00,0x00,0x1f,0xff,0xff,0xf0,
;  0x3f,0xff,0xdf,0xff,0xff,0xf0,
;  0x3f,0xdf,0xff,0xff,0xff,0xf0,
;  0x3f,0xdf,0xff,0xff,0xff,0xf0,
;  0x30,0x88,0x13,0x02,0x04,0x70,
;  0x30,0x88,0x13,0x02,0x04,0x70,
;  0x30,0x89,0x03,0x10,0x04,0x70,
;  0x30,0x89,0x83,0x10,0x04,0x70,
;  0x30,0x00,0x13,0x02,0x00,0x30,
;  0x30,0x20,0x13,0x02,0x01,0x30,
;  0x3b,0xac,0xb7,0xea,0xcf,0x70,
;  0x3f,0xff,0xff,0xff,0xff,0xf0,
;  0x3f,0xff,0xff,0xff,0xff,0xf0,
;  0x00,0x00,0x00,0x00,0x00,0x00,
;
;};

	.DSEG
;//char mess[10];
;void(*funtion[10])(int,int);
;
;unsigned char buffer[WIDTH*HEIGHT/8]; // 128 cot , 64 hang => co can 1024 byte bieu dien het man hinh
;
;void ADC_init(unsigned char input_channel) {
; 0000 0068 void ADC_init(unsigned char input_channel) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0069 
; 0000 006A 	ADCSRA |= (1 << ADEN);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	input_channel -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 006B 
; 0000 006C 	// The voltage reference is selected by the two bits REFS1 and REFS0 in the ADMUX register
; 0000 006D 	// 0 0	< AREF >
; 0000 006E 	// 0 1	< AVCC with external capacitor at AREF pin >
; 0000 006F 	// 1 1	< Internal 2.56V voltage reference with capacitor at AREF pin >
; 0000 0070 	ADMUX |= (1 << REFS0) | (1 << REFS1);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0071 	// Set the result is right adjusted
; 0000 0072 	// Set this bit to one if use result as left adjusted
; 0000 0073 	ADMUX |= (0 << ADLAR);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0074 	// Select input channel for AD_Converter: AD0 - AD7
; 0000 0075 	ADMUX |= input_channel;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0076 	// ADPS[2:0] determine the division factor between the XTAL frequency and the input clock to the ADC
; 0000 0077 	// Required input clock frequency: 50kHz -> 200kHz
; 0000 0078 	// 16MHz / 128 ~ 125kHz
; 0000 0079 	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 007A }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;
;unsigned int ADC_read() {
; 0000 007D unsigned int ADC_read() {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 007E 	unsigned int res = 0;
; 0000 007F 	ADCSRA |= (1 << ADSC);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	res -> R16,R17
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0080 	while(ADCSRA & (1 << ADSC));
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0081 
; 0000 0082 	res = ADCL;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0083 	res |= (ADCH << 8);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0084 
; 0000 0085 	return res;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0086 }
;PCODE: $0000003E VOL: 0
;
;int ADC_convert(unsigned int ADC) {
; 0000 0088 int ADC_convert(unsigned int ADC) {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0089 
; 0000 008A 	float temperature = ( ADC * 0.11);
; 0000 008B 
; 0000 008C 	return (int)temperature;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;	ADC -> Y+4
;	temperature -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008D }
;PCODE: $0000004C VOL: 0
;
;void uart_Init(){
; 0000 008F void uart_Init(){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0090   UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0091 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0092 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0093 UBRR0H=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0094 UBRR0L=0x67;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0095 }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;interrupt [USART_RXC]void usart_receive_isr (void)
; 0000 0097 {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0098 
; 0000 0099  data = UDR0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009A  flag =1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009B  if(data=='G'){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 009C     int adc_res = 0;
; 0000 009D 	ADC_init(ADC0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;	adc_res -> Y+0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009E 
; 0000 009F //	while (1) {
; 0000 00A0 		adc_res = ADC_read();
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00A1 		temp = ADC_convert(adc_res);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A2         UDR0 = temp;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A3         data =0;
;PCODE: $00000072 VOL: 0
; 0000 00A4 
; 0000 00A5 //	}
; 0000 00A6  }
;PCODE: $00000073 VOL: 0
; 0000 00A7 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;void read_Uart(){
; 0000 00A8 void read_Uart(){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A9 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;void I2c_init(void)
; 0000 00AC {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AD      TWSR = 0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AE      TWBR = 72 ;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00AF }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;
;
;unsigned char I2c_start(unsigned char address)
; 0000 00B4 {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B5     char   twst;
; 0000 00B6 
; 0000 00B7 	// send START condition
; 0000 00B8 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	address -> R16
;	twst -> R17
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B9 
; 0000 00BA 	// wait until transmission completed
; 0000 00BB 	while(!(TWCR & (1<<TWINT)));
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BC 
; 0000 00BD 	// check value of TWI Status Register. Mask prescaler bits.
; 0000 00BE 	twst = TWSR & 0xF8;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00BF 	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C0 
; 0000 00C1 	// send device address
; 0000 00C2 	TWDR = address;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00C3 	TWCR = (1<<TWINT) | (1<<TWEN);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C4 
; 0000 00C5 	// wail until transmission completed and ACK/NACK has been received
; 0000 00C6 	while(!(TWCR & (1<<TWINT)));
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00C7 
; 0000 00C8 	// check value of TWI Status Register. Mask prescaler bits.
; 0000 00C9 	twst = TWSR & 0xF8;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CA 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; // kiem tra ack
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00CB 
; 0000 00CC 	return 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CD 
; 0000 00CE }/* i2c_start */
;PCODE: $000000C0 VOL: 0
;
;void I2c_start_wait(unsigned char address)
; 0000 00D1 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00D2     char twst;
; 0000 00D3 
; 0000 00D4 
; 0000 00D5     while ( 1 )
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;	address -> R16
;	twst -> R17
;PCODE: $000000C6 VOL: 0
; 0000 00D6     {
; 0000 00D7         // send START condition
; 0000 00D8         TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D9 
; 0000 00DA         // wait until transmission completed
; 0000 00DB         while(!(TWCR & (1<<TWINT)));
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DC 
; 0000 00DD         // check value of TWI Status Register. Mask prescaler bits.
; 0000 00DE         twst = TWSR & 0xF8;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00DF         if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E0 
; 0000 00E1         // send device address
; 0000 00E2         TWDR = address;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E3         TWCR = (1<<TWINT) | (1<<TWEN);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E4 
; 0000 00E5         // wail until transmission completed
; 0000 00E6         while(!(TWCR & (1<<TWINT)));
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00E7 
; 0000 00E8         // check value of TWI Status Register. Mask prescaler bits.
; 0000 00E9         twst = TWSR & 0xF8;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00EA         if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MT_DATA_NACK) )
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00EB         {
; 0000 00EC             /* device busy, send stop condition to terminate write operation */
; 0000 00ED             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00EE 
; 0000 00EF             // wait until stop condition is executed and bus released
; 0000 00F0             while(TWCR & (1<<TWSTO));
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00F1 
; 0000 00F2             continue;
;PCODE: $000000FB VOL: 0
; 0000 00F3         }
; 0000 00F4         //if( twst != TW_MT_SLA_ACK) return 1;
; 0000 00F5         break;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00F6      }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F7 
; 0000 00F8 }/* i2c_start_wait */
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;
;
;unsigned char I2c_rep_start(unsigned char address)
; 0000 00FC {
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00FD     return I2c_start( address );
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;	address -> R17
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00FE 
; 0000 00FF }/* i2c_rep_start */
;PCODE: $0000010B VOL: 0
;
;
;
;void I2c_stop(void)
; 0000 0104 {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0105     /* send stop condition */
; 0000 0106     TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0107 
; 0000 0108     // wait until stop condition is executed and bus released
; 0000 0109     while(TWCR & (1<<TWSTO));
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 010A 
; 0000 010B }/* i2c_stop */
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;
;
;unsigned char I2c_write( unsigned char data )
; 0000 010F {
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0110     char  twst;
; 0000 0111 
; 0000 0112 	// send data to the previously addressed device
; 0000 0113 	TWDR = data;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;	data -> R16
;	twst -> R17
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0114 	TWCR = (1<<TWINT) | (1<<TWEN);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0115 
; 0000 0116 	// wait until transmission completed
; 0000 0117 	while(!(TWCR & (1<<TWINT)));
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0118 
; 0000 0119 	// check value of TWI Status Register. Mask prescaler bits
; 0000 011A 	twst = TWSR & 0xF8;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 011B 	if( twst != TW_MT_DATA_ACK) return 1;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 011C 	return 0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 011D 
; 0000 011E }/* i2c_write */
;PCODE: $00000134 VOL: 0
;
;
;
;void write_cmd1(char data){
; 0000 0122 void write_cmd1(char data){
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0123      I2c_start(addr_oled);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;	data -> R17
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0124       I2c_write(0x00);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0125        I2c_write(data);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0126        I2c_stop();
;PCODE: $0000013F VOL: 0
; 0000 0127 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;
;void cmd_list(unsigned char*c, int n){
; 0000 0129 void cmd_list(unsigned char*c, int n){
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 012A       unsigned char  bytesOut = 1;
; 0000 012B       I2c_start(addr_oled);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;	*c -> R20,R21
;	n -> R18,R19
;	bytesOut -> R17
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 012C       I2c_write(0x00);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 012D        while(n--) {
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 012E         if(bytesOut >= WIRE_MAX) {
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 012F          I2c_stop();
;PCODE: $00000158 VOL: 0
; 0000 0130          I2c_start(addr_oled);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0131          I2c_write(0x00);// Co = 0, D/C = 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0132           bytesOut = 1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0133         }
; 0000 0134       I2c_write(*c++);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0135       bytesOut++;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0136     }
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0137       I2c_stop();
;PCODE: $00000169 VOL: 0
; 0000 0138 }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;
;void initDisplay()
; 0000 013B {
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 013C     memset(buffer,0,1024);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 013D     write_cmd1(0xAE);          // 0xAE // display off
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 013E 
; 0000 013F     write_cmd1(0xD5);          // 0xD5 // set display clock division
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0140     write_cmd1(0x80);          // the suggested ratio 0x80
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0141 
; 0000 0142     write_cmd1(0xA8);          // 0xA8 set multiplex
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0143     write_cmd1(63);            // set height
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0144 
; 0000 0145 
; 0000 0146     write_cmd1(0xD3);          // set display offset
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0147     write_cmd1(0x00);           // no offset
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0148 
; 0000 0149     write_cmd1(0x40);            // line #0 setstartline
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 014A     write_cmd1(0x8D);          // 0x8D // chargepump
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 014B 
; 0000 014C     write_cmd1(0x14);    //?? 0x10
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 014D 
; 0000 014E     write_cmd1(0x20);          // memory mode
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 014F     write_cmd1(0x00);          // 0x0 act like ks0108
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0150     write_cmd1(0xA1);           // segremap
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0151     write_cmd1(0xC8);          // comscandec
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0152 
; 0000 0153     write_cmd1(0xDA);          // 0xDA set com pins
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0154     write_cmd1(0x12);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0155 
; 0000 0156     write_cmd1(0x81);          // 0x81 // set contract
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0157     write_cmd1(0xCF);      //??  0x9F
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0158 
; 0000 0159     write_cmd1(0xD9);          // 0xd9 set pre-charge
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 015A     write_cmd1(0xF1);         //0x22
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 015B 
; 0000 015C     write_cmd1(0xDB);          // SSD1306_SETVCOMDETECT
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 015D     write_cmd1(0x40);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 015E     write_cmd1(0xA4);          // 0xA4 // display all on resume
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 015F     write_cmd1(0xA6);          // 0xA6 // normal display
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0160     write_cmd1(0x2E);          // deactivate scroll
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0161 
; 0000 0162     write_cmd1(0xAF);          // --turn on oled panel
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0163 
; 0000 0164 }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;  //// wire max =32
;void display()
; 0000 0167 {
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0168 
; 0000 0169     int  count = WIDTH * ((HEIGHT + 7) / 8);
; 0000 016A     unsigned char *ptr   = buffer;
; 0000 016B     unsigned char bytesOut = 1;
; 0000 016C 
; 0000 016D     unsigned char dlist1[] = {
; 0000 016E      SSD1306_PAGEADDR,
; 0000 016F      0,                         // Page start address
; 0000 0170      0xFF,                      // Page end (not really, but works here)
; 0000 0171      SSD1306_COLUMNADDR,
; 0000 0172      0 };                       // Column start address
; 0000 0173     cmd_list(dlist1, sizeof(dlist1));
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;	count -> R16,R17
;	*ptr -> R18,R19
;	bytesOut -> R21
;	dlist1 -> Y+6
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0174     write_cmd1(WIDTH - 1);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0175 
; 0000 0176 
; 0000 0177 
; 0000 0178    I2c_start(addr_oled);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0179    I2c_write((unsigned)0x40);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 017A     while(count--) {
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 017B       if(bytesOut >= WIRE_MAX) {
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 017C        I2c_stop();
;PCODE: $000001D4 VOL: 0
; 0000 017D          I2c_start(addr_oled);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 017E         I2c_write((unsigned)0x40);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 017F         bytesOut = 1;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0180       }
; 0000 0181       I2c_write(*ptr++);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0182       bytesOut++;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0183     }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0184      I2c_stop();
;PCODE: $000001E5 VOL: 0
; 0000 0185 
; 0000 0186 
; 0000 0187 }
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;
;void drawpixel(int x, int y ){
; 0000 0189 void drawpixel(int x, int y ){
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 018A 
; 0000 018B   if((x >= 0) && (x <WIDTH) && (y >= 0) && (y < HEIGHT)) {
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;	x -> R18,R19
;	y -> R16,R17
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 018C     buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); //
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 018D    }
; 0000 018E 
; 0000 018F 
; 0000 0190 
; 0000 0191 }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;// gui lenh laf 0x00
;// gui data 0x40
;void clear(){
; 0000 0194 void clear(){
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0195     memset(buffer,0,1024);
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0196 }
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;
;void draw1(int x, int y ){
; 0000 0198 void draw1(int x, int y ){
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0199 int i,j;
; 0000 019A     for(i =x+3; i<x+6; i++){
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;	x -> Y+6
;	y -> R20,R21
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 019B        for(j=y ;j<y+8 ;j++){
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 019C         drawpixel(i,j);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 019D        }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 019E     }
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 019F }
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;
;void draw2(int x, int y ){
; 0000 01A1 void draw2(int x, int y ){
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01A2 int j;
; 0000 01A3 
; 0000 01A4        for(j=y ;j<y+8 ;j++){
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01A5 
; 0000 01A6         drawpixel(j,x+1);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 01A7          drawpixel(j,x+6);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 01A8           drawpixel(j,x+7);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 01A9        }
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01AA 
; 0000 01AB 
; 0000 01AC          for(j=y+2 ;j<y+6 ;j++){
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 01AD           drawpixel(j,x);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01AE        }
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 01AF 
; 0000 01B0         drawpixel(y+6,x+2);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01B1         drawpixel(y+7,x+2);
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01B2         drawpixel(y+4,x+3);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 01B3         drawpixel(y+5,x+3);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01B4         drawpixel(y+4,x+4);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 01B5         drawpixel(y+3,x+4);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01B6         drawpixel(y+3,x+5);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01B7         drawpixel(y+2,x+5);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01B8 }
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;
;void draw3(int x, int y ){
; 0000 01BA void draw3(int x, int y ){
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01BB int j;
; 0000 01BC     for(j=y ;j<y+8 ;j++){
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01BD 
; 0000 01BE         drawpixel(j,x+1);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01BF          drawpixel(j,x+6);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01C0        }
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 01C1         for(j=y+2 ;j<y+6 ;j++){
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01C2           drawpixel(j,x);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01C3            drawpixel(j,x+7);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01C4        }
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01C5         drawpixel(y+6,x+2);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 01C6         drawpixel(y+7,x+2);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01C7 
; 0000 01C8         drawpixel(y+6,x+5);
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01C9         drawpixel(y+7,x+5);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01CA 
; 0000 01CB         drawpixel(y+4,x+3);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01CC         drawpixel(y+5,x+3);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01CD         drawpixel(y+4,x+4);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01CE         drawpixel(y+5,x+4);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01CF }
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;
;void draw4(int x, int y ){
; 0000 01D1 void draw4(int x, int y ){
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01D2 int i,j;
; 0000 01D3      for(j=y ;j<y+8 ;j++){
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;	x -> Y+6
;	y -> R20,R21
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01D4          drawpixel(j,x+6);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01D5             drawpixel(j,x+5);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01D6      }
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01D7       for(i =x+0; i<x+8; i++){
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 01D8         drawpixel(y+6,i);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01D9         drawpixel(y+5,i);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 01DA       }
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01DB       for(i =x+1; i<x+5; i++){
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01DC         drawpixel(y+(5-(i-x)),i);
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01DD 
; 0000 01DE       }
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01DF }
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;
;void draw6(int x, int y ){
; 0000 01E1 void draw6(int x, int y ){
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01E2 int j;
; 0000 01E3      for(j=y ;j<y+8 ;j++){
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01E4          drawpixel(j,x+6);
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 01E5             drawpixel(j,x+1);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01E6      }
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01E7        for(j=y+2 ;j<y+6 ;j++){
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 01E8          drawpixel(j,x);
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 01E9             drawpixel(j,x+3);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 01EA              drawpixel(j,x+7);
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01EB      }
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 01EC 
; 0000 01ED       drawpixel(y+0,x+2);
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01EE         drawpixel(y+0,x+3);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01EF          drawpixel(y+1,x+2);
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 01F0         drawpixel(y+1,x+3);
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 01F1       drawpixel(y+0,x+4);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01F2         drawpixel(y+0,x+5);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 01F3          drawpixel(y+1,x+4);
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01F4         drawpixel(y+1,x+5);
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 01F5         drawpixel(y+6,x+4);
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 01F6         drawpixel(y+6,x+5);
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 01F7          drawpixel(y+7,x+4);
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 01F8         drawpixel(y+7,x+5);
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 01F9 
; 0000 01FA 
; 0000 01FB }
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;
;
;void draw5(int x, int y ){
; 0000 01FE void draw5(int x, int y ){
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 01FF int j;
; 0000 0200      for(j=y ;j<y+8 ;j++){
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0201          drawpixel(j,x+6);
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0202             drawpixel(j,x+1);
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0203      }
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 0204        for(j=y+2 ;j<y+6 ;j++){
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 0205          drawpixel(j,x);
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0206             drawpixel(j,x+3);
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 0207              drawpixel(j,x+7);
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 0208      }
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0209 
; 0000 020A       drawpixel(y+0,x+2);
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 020B         drawpixel(y+0,x+3);
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 020C          drawpixel(y+1,x+2);
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 020D         drawpixel(y+1,x+3);
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 020E         drawpixel(y+6,x+4);
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 020F         drawpixel(y+6,x+5);
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0210          drawpixel(y+7,x+4);
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 0211         drawpixel(y+7,x+5);
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0212           drawpixel(y,x);
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0213           drawpixel(y+1,x);
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 0214 }
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;
;void draw7(int x, int y ){
; 0000 0216 void draw7(int x, int y ){
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0217 int j;
; 0000 0218      for(j=y ;j<y+8 ;j++){
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0219          drawpixel(j,x);
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 021A            }
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 021B 
; 0000 021C       drawpixel(y+0,x+1);
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 021D        drawpixel(y+7,x+1);
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 021E        drawpixel(y+6,x+3);
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 021F          drawpixel(y+1,x+1);
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0220         drawpixel(y+4,x+4);
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 0221         drawpixel(y+4,x+5);
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 0222          drawpixel(y+5,x+4);
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0223         drawpixel(y+5,x+5);
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 0224           drawpixel(y+6,x+2);
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 0225         drawpixel(y+6,x+3);
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 0226          drawpixel(y+7,x+2);
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0227         drawpixel(y+7,x+3);
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0228          drawpixel(y+4,x+6);
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0229         drawpixel(y+4,x+7);
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 022A          drawpixel(y+3,x+6);
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 022B         drawpixel(y+3,x+7);
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 022C }
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;
;void draw8(int x, int y ){
; 0000 022E void draw8(int x, int y ){
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 022F int j;
; 0000 0230      for(j=y ;j<y+8 ;j++){
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 0231          drawpixel(j,x+6);
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0232             drawpixel(j,x+1);
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 0233      }
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 0234        for(j=y+2 ;j<y+6 ;j++){
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 0235             drawpixel(j,x);
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 0236             drawpixel(j,x+3);
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 0237               drawpixel(j,x+4);
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 0238              drawpixel(j,x+7);
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0239      }
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 023A 
; 0000 023B       drawpixel(y+0,x+2);
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0000 023C        // drawpixel(y+0,x+3);
; 0000 023D          drawpixel(y+1,x+2);
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 023E         drawpixel(y+1,x+3);
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 023F        //drawpixel(y+0,x+4);
; 0000 0240         drawpixel(y+0,x+5);
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0241          drawpixel(y+1,x+4);
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 0242         drawpixel(y+1,x+5);
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 0243         drawpixel(y+6,x+4);
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 0244         drawpixel(y+6,x+5);
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 0245        //  drawpixel(y+7,x+4);
; 0000 0246         drawpixel(y+7,x+5);
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 0247 
; 0000 0248         drawpixel(y+6,x+2);
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 0249         drawpixel(y+6,x+3);
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 024A          drawpixel(y+7,x+2);
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 024B        // drawpixel(y+7,x+3);
; 0000 024C }
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;
;void draw9(int x, int y ){
; 0000 024E void draw9(int x, int y ){
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 024F int j;
; 0000 0250      for(j=y ;j<y+8 ;j++){
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 0251          drawpixel(j,x+6);
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 0252             drawpixel(j,x+1);
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 0253      }
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
; 0000 0254        for(j=y+2 ;j<y+6 ;j++){
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 0255          drawpixel(j,x);
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 0256             drawpixel(j,x+3);
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
; 0000 0257              drawpixel(j,x+7);
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 0258      }
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 0259 
; 0000 025A         drawpixel(y+0,x+2);
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 025B         drawpixel(y+0,x+3);
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 025C          drawpixel(y+1,x+2);
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0000 025D         drawpixel(y+1,x+3);
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 025E         drawpixel(y+6,x+4);
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 025F         drawpixel(y+6,x+5);
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 0260         drawpixel(y+7,x+4);
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
; 0000 0261         drawpixel(y+7,x+5);
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 0262         drawpixel(y+6,x+2);
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
; 0000 0263         drawpixel(y+6,x+3);
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
; 0000 0264         drawpixel(y+7,x+2);
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 0265         drawpixel(y+7,x+3);
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
; 0000 0266 
; 0000 0267 }
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;
;void draw0(int x, int y ){
; 0000 0269 void draw0(int x, int y ){
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
; 0000 026A int j;
; 0000 026B      for(j=y ;j<y+8 ;j++){
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;	x -> R20,R21
;	y -> R18,R19
;	j -> R16,R17
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
; 0000 026C          drawpixel(j,x+6);
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
; 0000 026D             drawpixel(j,x+1);
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 026E      }
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0000 026F        for(j=y+2 ;j<y+6 ;j++){
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
; 0000 0270          drawpixel(j,x);
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 0271           //  drawpixel(j,x+3);
; 0000 0272              drawpixel(j,x+7);
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 0273      }
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 0274 
; 0000 0275         drawpixel(y+0,x+2);
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
; 0000 0276         drawpixel(y+0,x+3);
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
; 0000 0277          drawpixel(y+1,x+2);
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 0278         drawpixel(y+1,x+3);
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
; 0000 0279         drawpixel(y+0,x+4);
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 027A         drawpixel(y+0,x+5);
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 027B         drawpixel(y+1,x+4);
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 027C         drawpixel(y+1,x+5);
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
; 0000 027D         drawpixel(y+6,x+4);
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
; 0000 027E         drawpixel(y+6,x+5);
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 027F         drawpixel(y+7,x+4);
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 0280         drawpixel(y+7,x+5);
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
; 0000 0281         drawpixel(y+6,x+2);
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
; 0000 0282         drawpixel(y+6,x+3);
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
; 0000 0283         drawpixel(y+7,x+2);
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 0284         drawpixel(y+7,x+3);
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 0285 
; 0000 0286 }
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;
;//void drawH(int x, int y ){
;// int i, j;
;//         for(i =x; i<x+8; i++){
;//            drawpixel(y,i);
;//            drawpixel(y+1,i);
;//            drawpixel(y+6,i);
;//            drawpixel(y+7,i);
;//         }
;//
;//         for(j=y+2 ;j<y+6 ;j++){
;//         drawpixel(j,x+3);
;//          //  drawpixel(j,x+3);
;//             drawpixel(j,x+4);
;//     }
;//}
;//
;//void drawU(int x, int y ){
;// int i, j;
;//         for(i =x; i<x+6; i++){
;//            drawpixel(y,i);
;//            drawpixel(y+1,i);
;//            drawpixel(y+6,i);
;//           // drawpixel(y+7,i);
;//         }
;//          for(i =x; i<x+8; i++){
;//
;//            drawpixel(y+7,i);
;//         }
;//
;//         for(j=y+2 ;j<y+6 ;j++){
;//           drawpixel(j,x+6);
;//
;//           drawpixel(j,x+7);
;//     }
;//}
;//
;//void drawV(int x, int y ){
;// int i, j;
;//         for(i =x; i<x+6; i++){
;//            drawpixel(y,i);
;//            drawpixel(y+1,i);
;//            drawpixel(y+6,i);
;//            drawpixel(y+7,i);
;//         }
;//
;//
;//         for(j=y+2 ;j<y+6 ;j++){
;//           drawpixel(j,x+6);
;//
;//           drawpixel(j,x+7);
;//     }
;//}
;//
;//void drawP(int x, int y ){
;// int i, j;
;//         for(i =x; i<x+8; i++){
;//            drawpixel(y,i);
;//            drawpixel(y+1,i);
;//
;//         }
;//
;//
;//         for(j=y+2 ;j<y+5 ;j++){
;//           drawpixel(j,x+0);
;//
;//           drawpixel(j,x+3);
;//         }
;//         drawpixel(y+5,x+1);
;//         drawpixel(y+5,x+2);
;//
;//}
;//
;//
;//void drawR(int x, int y ){
;// int i, j;
;//         for(i =x; i<x+8; i++){
;//            drawpixel(y,i);
;//            drawpixel(y+1,i);
;//
;//         }
;//
;//
;//         for(j=y+2 ;j<y+5 ;j++){
;//           drawpixel(j,x+0);
;//
;//           drawpixel(j,x+3);
;//         }
;//         drawpixel(y+5,x+1);
;//         drawpixel(y+5,x+2);
;//          drawpixel(y+5,x+6);
;//         drawpixel(y+5,x+7);
;//
;//          drawpixel(y+5,x+5);
;//          drawpixel(y+6,x+7);
;//
;//          drawpixel(y+4,x+3);
;//          drawpixel(y+5,x+4);
;//}
;//
;//
;//void drawS(int x, int y ){
;//
;//        drawpixel(y+3,x+0);
;//         drawpixel(y+4,x+0);
;//          drawpixel(y+5,x+0);
;//
;//        //drawpixel(y+1,x+1);
;//        drawpixel(y+2,x+1);
;//        drawpixel(y+3,x+1);
;//        drawpixel(y+5,x+1);
;//        drawpixel(y+6,x+1);
;//
;//        //drawpixel(y+1,x+2);
;//        drawpixel(y+2,x+2);
;//        drawpixel(y+6,x+2);
;//
;//        drawpixel(y+3,x+3);
;//        drawpixel(y+4,x+4);
;//
;//        drawpixel(y+1,x+5);
;//        drawpixel(y+5,x+5);
;//       // drawpixel(y+6,x+5);
;//       //  drawpixel(y+1,x+1);
;//
;//        drawpixel(y+2,x+6);
;//        drawpixel(y+1,x+6);
;//        drawpixel(y+4,x+6);
;//        drawpixel(y+5,x+6);
;//       // drawpixel(y+6,x+6);
;//
;//        drawpixel(y+3,x+7);
;//         drawpixel(y+4,x+7);
;//          drawpixel(y+2,x+7);
;//}
;//void drawC(int x, int y ){
;//        int j;
;//        for (j =y+3;j<y+6;j++){
;//            drawpixel(j,x+0);
;//            drawpixel(j,x+7);
;//
;//        }
;//
;//        drawpixel(y+2,x+1);
;//        drawpixel(y+6,x+1);
;//
;//
;//        drawpixel(y+2,x+2);
;//        drawpixel(y+1,x+2);
;//
;//        drawpixel(y+1,x+3);
;//        drawpixel(y+2,x+3);
;//         drawpixel(y+1,x+4);
;//        drawpixel(y+2,x+4);
;//
;//      drawpixel(y+1,x+5);
;//        drawpixel(y+2,x+5);
;//
;//        drawpixel(y+2,x+6);
;//        drawpixel(y+6,x+6);
;//
;//
;//}
;//
;//
;//
;//void drawTwoPoint(int x, int y ){
;//        drawpixel(y+1,x+7);
;//        drawpixel(y+2,x+7);
;//
;//        drawpixel(y+1,x+6);
;//        drawpixel(y+2,x+6);
;//        drawpixel(y+1,x+0);
;//        drawpixel(y+2,x+0);
;//
;//        drawpixel(y+1,x+1);
;//        drawpixel(y+2,x+1);
;//
;//}
;
;
;
;void drawBitmap(int x, int y, unsigned char bitmap[], int w, int  h) {
; 0000 033D void drawBitmap(int x, int y, unsigned char bitmap[], int w, int  h) {
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
; 0000 033E    int i, j;
; 0000 033F    int byteWidth= (w+7)/8;
; 0000 0340    int  byte = 0;
; 0000 0341   for ( j = 0; j < h; j++) {
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;	x -> Y+16
;	y -> Y+14
;	bitmap -> Y+12
;	w -> Y+10
;	h -> Y+8
;	i -> R16,R17
;	j -> R18,R19
;	byteWidth -> R20,R21
;	byte -> Y+6
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
; 0000 0342     for ( i = 0; i < w; i++) {
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0000 0343 
; 0000 0344           if (i & 7)
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
; 0000 0345           byte <<= 1;
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
; 0000 0346           else
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0000 0347           byte = bitmap[j * byteWidth + i / 8];
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 0348          if(byte & 0x80){
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 0349             drawpixel(x + i,y+j);
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0000 034A          }
; 0000 034B 
; 0000 034C 
; 0000 034D     }
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0000 034E   }
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0000 034F 
; 0000 0350 }
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;
;void drawImage(unsigned char bitmap[],int  LOGO_HEIGHT,int  LOGO_WIDTH){
; 0000 0352 void drawImage(unsigned char bitmap[],int  LOGO_HEIGHT,int  LOGO_WIDTH){
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0000 0353     drawBitmap(
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;	bitmap -> R20,R21
;	LOGO_HEIGHT -> R18,R19
;	LOGO_WIDTH -> R16,R17
; 0000 0354     (WIDTH  - LOGO_WIDTH ) / 2,
; 0000 0355     (HEIGHT - LOGO_HEIGHT) / 2,
; 0000 0356     bitmap, LOGO_WIDTH, LOGO_HEIGHT);
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
; 0000 0357 }
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;
;void main(void)
; 0000 035A {
;PCODE: $000006EE VOL: 0
; 0000 035B   char temstr[5];
; 0000 035C   funtion[0] =draw0;
;PCODE: $000006EF VOL: 0
;	temstr -> Y+0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0000 035D   funtion[1] =draw1;
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
; 0000 035E   funtion[2] =draw2;
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
; 0000 035F   funtion[3] =draw3;
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
; 0000 0360   funtion[4] =draw4;
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
; 0000 0361   funtion[5] =draw5;
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 0362   funtion[6] =draw6;
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
; 0000 0363   funtion[7] =draw7;
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
; 0000 0364   funtion[8] =draw8;
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
; 0000 0365   funtion[9] =draw9;
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0000 0366   uart_Init();
;PCODE: $00000716 VOL: 0
; 0000 0367    #asm("sei");
;PCODE: $00000717 VOL: 0
; 0000 0368   I2c_init();
;PCODE: $00000718 VOL: 0
; 0000 0369   initDisplay();
;PCODE: $00000719 VOL: 0
; 0000 036A   while (1)
;PCODE: $0000071A VOL: 0
; 0000 036B       {
; 0000 036C        clear();
;PCODE: $0000071B VOL: 0
; 0000 036D       if(!flag){
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
; 0000 036E       drawImage(logo_bmp,67,45);
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
; 0000 036F 
; 0000 0370       }else{
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0000 0371        memset(temstr,0,5);
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
; 0000 0372        itoa(temp,temstr);
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 0373        funtion[temstr[0]-48](30,20);
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
; 0000 0374        funtion[temstr[1]-48](30,30);
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
; 0000 0375        // flag=0;
; 0000 0376      }
;PCODE: $0000074D VOL: 0
; 0000 0377          display();
;PCODE: $0000074E VOL: 0
; 0000 0378       }
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
; 0000 0379 }
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
