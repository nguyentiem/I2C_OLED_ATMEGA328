
;CodeVisionAVR C Compiler V3.39b Evaluation
;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.ro

;Build configuration    : Debug
;Chip type              : ATmega328P
;Program type           : Application
;Clock frequency        : 16.000000 MHz
;Memory model           : Small
;Optimize for           : Size
;(s)printf features     : int, width
;(s)scanf features      : int, width
;External RAM size      : 0
;Data Stack size        : 512 byte(s)
;Heap size              : 0 byte(s)
;Promote 'char' to 'int': Yes
;'char' is unsigned     : Yes
;8 bit enums            : Yes
;Global 'const' stored in FLASH: Yes
;Enhanced function parameter passing: Mode 2
;Enhanced core instructions: On
;Automatic register allocation for global variables: On
;Smart register allocation: On

	#define _MODEL_SMALL_

	#pragma AVRPART ADMIN PART_NAME ATmega328P
	#pragma AVRPART MEMORY PROG_FLASH 32768
	#pragma AVRPART MEMORY EEPROM 1024
	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100

	#define CALL_SUPPORTED 1

	.LISTMAC
	.EQU EERE=0x0
	.EQU EEWE=0x1
	.EQU EEMWE=0x2
	.EQU UDRE=0x5
	.EQU RXC=0x7
	.EQU EECR=0x1F
	.EQU EEDR=0x20
	.EQU EEARL=0x21
	.EQU EEARH=0x22
	.EQU SPSR=0x2D
	.EQU SPDR=0x2E
	.EQU SMCR=0x33
	.EQU MCUSR=0x34
	.EQU MCUCR=0x35
	.EQU WDTCSR=0x60
	.EQU UCSR0A=0xC0
	.EQU UDR0=0xC6
	.EQU SPL=0x3D
	.EQU SPH=0x3E
	.EQU SREG=0x3F
	.EQU GPIOR0=0x1E

	.DEF R0X0=R0
	.DEF R0X1=R1
	.DEF R0X2=R2
	.DEF R0X3=R3
	.DEF R0X4=R4
	.DEF R0X5=R5
	.DEF R0X6=R6
	.DEF R0X7=R7
	.DEF R0X8=R8
	.DEF R0X9=R9
	.DEF R0XA=R10
	.DEF R0XB=R11
	.DEF R0XC=R12
	.DEF R0XD=R13
	.DEF R0XE=R14
	.DEF R0XF=R15
	.DEF R0X10=R16
	.DEF R0X11=R17
	.DEF R0X12=R18
	.DEF R0X13=R19
	.DEF R0X14=R20
	.DEF R0X15=R21
	.DEF R0X16=R22
	.DEF R0X17=R23
	.DEF R0X18=R24
	.DEF R0X19=R25
	.DEF R0X1A=R26
	.DEF R0X1B=R27
	.DEF R0X1C=R28
	.DEF R0X1D=R29
	.DEF R0X1E=R30
	.DEF R0X1F=R31

	.EQU __SRAM_START=0x0100
	.EQU __SRAM_END=0x08FF
	.EQU __DSTACK_SIZE=0x0200
	.EQU __HEAP_SIZE=0x0000
	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1

	.MACRO __CPD1N
	CPI  R30,LOW(@0)
	LDI  R26,HIGH(@0)
	CPC  R31,R26
	LDI  R26,BYTE3(@0)
	CPC  R22,R26
	LDI  R26,BYTE4(@0)
	CPC  R23,R26
	.ENDM

	.MACRO __CPD2N
	CPI  R26,LOW(@0)
	LDI  R30,HIGH(@0)
	CPC  R27,R30
	LDI  R30,BYTE3(@0)
	CPC  R24,R30
	LDI  R30,BYTE4(@0)
	CPC  R25,R30
	.ENDM

	.MACRO __CPWRR
	CP   R@0,R@2
	CPC  R@1,R@3
	.ENDM

	.MACRO __CPWRN
	CPI  R@0,LOW(@2)
	LDI  R30,HIGH(@2)
	CPC  R@1,R30
	.ENDM

	.MACRO __ADDB1MN
	SUBI R30,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDB2MN
	SUBI R26,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDW1MN
	SUBI R30,LOW(-@0-(@1))
	SBCI R31,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW2MN
	SUBI R26,LOW(-@0-(@1))
	SBCI R27,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	SBCI R22,BYTE3(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1N
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	SBCI R23,BYTE4(-@0)
	.ENDM

	.MACRO __ADDD2N
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	SBCI R24,BYTE3(-@0)
	SBCI R25,BYTE4(-@0)
	.ENDM

	.MACRO __SUBD1N
	SUBI R30,LOW(@0)
	SBCI R31,HIGH(@0)
	SBCI R22,BYTE3(@0)
	SBCI R23,BYTE4(@0)
	.ENDM

	.MACRO __SUBD2N
	SUBI R26,LOW(@0)
	SBCI R27,HIGH(@0)
	SBCI R24,BYTE3(@0)
	SBCI R25,BYTE4(@0)
	.ENDM

	.MACRO __ANDBMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ANDWMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ANDI R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ANDD1N
	ANDI R30,LOW(@0)
	ANDI R31,HIGH(@0)
	ANDI R22,BYTE3(@0)
	ANDI R23,BYTE4(@0)
	.ENDM

	.MACRO __ANDD2N
	ANDI R26,LOW(@0)
	ANDI R27,HIGH(@0)
	ANDI R24,BYTE3(@0)
	ANDI R25,BYTE4(@0)
	.ENDM

	.MACRO __ORBMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ORWMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ORI  R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ORD1N
	ORI  R30,LOW(@0)
	ORI  R31,HIGH(@0)
	ORI  R22,BYTE3(@0)
	ORI  R23,BYTE4(@0)
	.ENDM

	.MACRO __ORD2N
	ORI  R26,LOW(@0)
	ORI  R27,HIGH(@0)
	ORI  R24,BYTE3(@0)
	ORI  R25,BYTE4(@0)
	.ENDM

	.MACRO __DELAY_USB
	LDI  R24,LOW(@0)
__DELAY_USB_LOOP:
	DEC  R24
	BRNE __DELAY_USB_LOOP
	.ENDM

	.MACRO __DELAY_USW
	LDI  R24,LOW(@0)
	LDI  R25,HIGH(@0)
__DELAY_USW_LOOP:
	SBIW R24,1
	BRNE __DELAY_USW_LOOP
	.ENDM

	.MACRO __GETD1S
	LDD  R30,Y+@0
	LDD  R31,Y+@0+1
	LDD  R22,Y+@0+2
	LDD  R23,Y+@0+3
	.ENDM

	.MACRO __GETD2S
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	LDD  R24,Y+@0+2
	LDD  R25,Y+@0+3
	.ENDM

	.MACRO __PUTD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R31
	STD  Y+@0+2,R22
	STD  Y+@0+3,R23
	.ENDM

	.MACRO __PUTD2S
	STD  Y+@0,R26
	STD  Y+@0+1,R27
	STD  Y+@0+2,R24
	STD  Y+@0+3,R25
	.ENDM

	.MACRO __PUTDZ2
	STD  Z+@0,R26
	STD  Z+@0+1,R27
	STD  Z+@0+2,R24
	STD  Z+@0+3,R25
	.ENDM

	.MACRO __CLRD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R30
	STD  Y+@0+2,R30
	STD  Y+@0+3,R30
	.ENDM

	.MACRO __POINTB1MN
	LDI  R30,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW1MN
	LDI  R30,LOW(@0+(@1))
	LDI  R31,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD1M
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __POINTW1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	LDI  R23,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTB2MN
	LDI  R26,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW2MN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD2M
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __POINTW2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	LDI  R24,BYTE3(2*@0+(@1))
	LDI  R25,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTBRM
	LDI  R@0,LOW(@1)
	.ENDM

	.MACRO __POINTWRM
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __POINTBRMN
	LDI  R@0,LOW(@1+(@2))
	.ENDM

	.MACRO __POINTWRMN
	LDI  R@0,LOW(@2+(@3))
	LDI  R@1,HIGH(@2+(@3))
	.ENDM

	.MACRO __POINTWRFN
	LDI  R@0,LOW(@2*2+(@3))
	LDI  R@1,HIGH(@2*2+(@3))
	.ENDM

	.MACRO __GETD1N
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __GETD2N
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __GETB1MN
	LDS  R30,@0+(@1)
	.ENDM

	.MACRO __GETB1HMN
	LDS  R31,@0+(@1)
	.ENDM

	.MACRO __GETW1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	.ENDM

	.MACRO __GETD1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	LDS  R23,@0+(@1)+3
	.ENDM

	.MACRO __GETBRMN
	LDS  R@0,@1+(@2)
	.ENDM

	.MACRO __GETWRMN
	LDS  R@0,@2+(@3)
	LDS  R@1,@2+(@3)+1
	.ENDM

	.MACRO __GETWRZ
	LDD  R@0,Z+@2
	LDD  R@1,Z+@2+1
	.ENDM

	.MACRO __GETD2Z
	LDD  R26,Z+@0
	LDD  R27,Z+@0+1
	LDD  R24,Z+@0+2
	LDD  R25,Z+@0+3
	.ENDM

	.MACRO __GETB2MN
	LDS  R26,@0+(@1)
	.ENDM

	.MACRO __GETW2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	.ENDM

	.MACRO __GETD2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	LDS  R24,@0+(@1)+2
	LDS  R25,@0+(@1)+3
	.ENDM

	.MACRO __PUTB1MN
	STS  @0+(@1),R30
	.ENDM

	.MACRO __PUTW1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	.ENDM

	.MACRO __PUTD1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	STS  @0+(@1)+2,R22
	STS  @0+(@1)+3,R23
	.ENDM

	.MACRO __PUTB1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRB
	.ENDM

	.MACRO __PUTW1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRW
	.ENDM

	.MACRO __PUTD1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRD
	.ENDM

	.MACRO __PUTBR0MN
	STS  @0+(@1),R0
	.ENDM

	.MACRO __PUTBMRN
	STS  @0+(@1),R@2
	.ENDM

	.MACRO __PUTWMRN
	STS  @0+(@1),R@2
	STS  @0+(@1)+1,R@3
	.ENDM

	.MACRO __PUTBZR
	STD  Z+@1,R@0
	.ENDM

	.MACRO __PUTWZR
	STD  Z+@2,R@0
	STD  Z+@2+1,R@1
	.ENDM

	.MACRO __GETW1R
	MOV  R30,R@0
	MOV  R31,R@1
	.ENDM

	.MACRO __GETW2R
	MOV  R26,R@0
	MOV  R27,R@1
	.ENDM

	.MACRO __GETWRN
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __PUTW1R
	MOV  R@0,R30
	MOV  R@1,R31
	.ENDM

	.MACRO __PUTW2R
	MOV  R@0,R26
	MOV  R@1,R27
	.ENDM

	.MACRO __ADDWRN
	SUBI R@0,LOW(-@2)
	SBCI R@1,HIGH(-@2)
	.ENDM

	.MACRO __ADDWRR
	ADD  R@0,R@2
	ADC  R@1,R@3
	.ENDM

	.MACRO __SUBWRN
	SUBI R@0,LOW(@2)
	SBCI R@1,HIGH(@2)
	.ENDM

	.MACRO __SUBWRR
	SUB  R@0,R@2
	SBC  R@1,R@3
	.ENDM

	.MACRO __ANDWRN
	ANDI R@0,LOW(@2)
	ANDI R@1,HIGH(@2)
	.ENDM

	.MACRO __ANDWRR
	AND  R@0,R@2
	AND  R@1,R@3
	.ENDM

	.MACRO __ORWRN
	ORI  R@0,LOW(@2)
	ORI  R@1,HIGH(@2)
	.ENDM

	.MACRO __ORWRR
	OR   R@0,R@2
	OR   R@1,R@3
	.ENDM

	.MACRO __EORWRR
	EOR  R@0,R@2
	EOR  R@1,R@3
	.ENDM

	.MACRO __GETWRS
	LDD  R@0,Y+@2
	LDD  R@1,Y+@2+1
	.ENDM

	.MACRO __PUTBSR
	STD  Y+@1,R@0
	.ENDM

	.MACRO __PUTWSR
	STD  Y+@2,R@0
	STD  Y+@2+1,R@1
	.ENDM

	.MACRO __MOVEWRR
	MOV  R@0,R@2
	MOV  R@1,R@3
	.ENDM

	.MACRO __INWR
	IN   R@0,@2
	IN   R@1,@2+1
	.ENDM

	.MACRO __OUTWR
	OUT  @2+1,R@1
	OUT  @2,R@0
	.ENDM

	.MACRO __CALL1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	ICALL
	.ENDM

	.MACRO __CALL1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	CALL __GETW1PF
	ICALL
	.ENDM

	.MACRO __CALL2EN
	PUSH R26
	PUSH R27
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMRDW
	POP  R27
	POP  R26
	ICALL
	.ENDM

	.MACRO __CALL2EX
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __EEPROMRDD
	ICALL
	.ENDM

	.MACRO __GETW1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z
	MOVW R30,R0
	.ENDM

	.MACRO __NBST
	BST  R@0,@1
	IN   R30,SREG
	LDI  R31,0x40
	EOR  R30,R31
	OUT  SREG,R30
	.ENDM


	.MACRO __PUTB1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RNS
	MOVW R26,R@0
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	CALL __PUTDP1
	.ENDM


	.MACRO __GETB1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R30,Z
	.ENDM

	.MACRO __GETB1HSX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	.ENDM

	.MACRO __GETW1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	CALL __GETW1Z
	.ENDM

	.MACRO __GETD1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	CALL __GETD1Z
	.ENDM

	.MACRO __GETB2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R26,X
	.ENDM

	.MACRO __GETW2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __GETW2X
	.ENDM

	.MACRO __GETD2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __GETD2X
	.ENDM

	.MACRO __GETBRSX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	LD   R@0,Z
	.ENDM

	.MACRO __GETWRSX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	LD   R@0,Z+
	LD   R@1,Z
	.ENDM

	.MACRO __GETBRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	LD   R@0,X
	.ENDM

	.MACRO __GETWRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	LD   R@0,X+
	LD   R@1,X
	.ENDM

	.MACRO __LSLW8SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	CLR  R30
	.ENDM

	.MACRO __PUTB1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __CLRW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __CLRD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R30
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __PUTB2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z,R26
	.ENDM

	.MACRO __PUTW2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z,R27
	.ENDM

	.MACRO __PUTD2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z+,R27
	ST   Z+,R24
	ST   Z,R25
	.ENDM

	.MACRO __PUTBSRX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	ST   Z,R@0
	.ENDM

	.MACRO __PUTWSRX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	ST   Z+,R@0
	ST   Z,R@1
	.ENDM

	.MACRO __PUTB1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __MULBRR
	MULS R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRRU
	MUL  R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRR0
	MULS R@0,R@1
	.ENDM

	.MACRO __MULBRRU0
	MUL  R@0,R@1
	.ENDM

	.MACRO __MULBNWRU
	LDI  R26,@2
	MUL  R26,R@0
	MOVW R30,R0
	MUL  R26,R@1
	ADD  R31,R0
	.ENDM

;GPIOR0 INITIALIZATION VALUE
	.EQU __GPIOR0_INIT=0x00

	.CSEG
	.ORG 0x00

;START OF CODE MARKER
__START_OF_CODE:

;INTERRUPT VECTORS
	JMP  __RESET
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00

__RESET:
	CLI
	CLR  R30
	OUT  EECR,R30

;INTERRUPT VECTORS ARE PLACED
;AT THE START OF FLASH
	LDI  R31,1
	OUT  MCUCR,R31
	OUT  MCUCR,R30

;CLEAR R2-R14
	LDI  R24,(14-2)+1
	LDI  R26,2
	CLR  R27
__CLEAR_REG:
	ST   X+,R30
	DEC  R24
	BRNE __CLEAR_REG

;CLEAR SRAM
	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
	LDI  R26,LOW(__SRAM_START)
	LDI  R27,HIGH(__SRAM_START)
__CLEAR_SRAM:
	ST   X+,R30
	SBIW R24,1
	BRNE __CLEAR_SRAM

;GPIOR0 INITIALIZATION
	LDI  R30,__GPIOR0_INIT
	OUT  GPIOR0,R30

;HARDWARE STACK POINTER INITIALIZATION
	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
	OUT  SPL,R30
	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
	OUT  SPH,R30

;DATA STACK POINTER INITIALIZATION
	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)

	JMP  _main

	.ESEG
	.ORG 0x00

	.DSEG
	.ORG 0x300

	.CSEG
;/*******************************************************
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;
;#include <mega328p.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_adc_noise_red=0x02
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.SET power_ctrl_reg=smcr
	#endif
;#ifndef F_CPU
;#define F_CPU 16000000UL
;#endif
;//#define SCL_CLOCK  100000L
;
;//#define BITRATE(TWSR)	((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1)))))
;#define addr 0x3C
;#define TW_START 0x08 // start
;#define  TW_REP_START  0x10    // repeat start
;
;#define  TW_MT_SLA_ACK 0x18   // truyen slave addr de ghi co ack
;#define  TW_MT_SLA_NACK 0x20 //  truyen slave addr de ghi  ko co ack
;
;#define  TW_MR_SLA_ACK 0x40   // truyen slave addr de doc co ack
;#define  TW_MR_SLA_ACK 0x48    //  truyen slave addr de doc  ko co ack
;
;#define  TW_MT_DATA_ACK 0x28 // gui dl co ack
;#define  TW_MT_DATA_NACK 0x30  // nhan dl khong co ack
;
;//#define  TW_MR_DATA_ACK 0x28 // gui dl co ack
;//#define  TW_MR_DATA_NACK 0x30  // nhan dl khong co ack
;
;void i2c_init(void)
; 0000 0025 {

	.CSEG
_i2c_init:
; .FSTART _i2c_init
; 0000 0026 
; 0000 0027      TWSR = 0x00;
	LDI  R30,LOW(0)
	STS  185,R30
; 0000 0028      TWBR = 72 ;
	LDI  R30,LOW(72)
	STS  184,R30
; 0000 0029 }
	RET
; .FEND
;
;
;
;unsigned char i2c_start(unsigned char address)
; 0000 002E {
_i2c_start:
; .FSTART _i2c_start
; 0000 002F     char   twst;
; 0000 0030 
; 0000 0031 	// send START condition
; 0000 0032 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	ST   -Y,R17
	ST   -Y,R16
	MOV  R16,R26
;	address -> R16
;	twst -> R17
	LDI  R30,LOW(164)
	STS  188,R30
; 0000 0033 
; 0000 0034 	// wait until transmission completed
; 0000 0035 	while(!(TWCR & (1<<TWINT)));
_0x3:
	LDS  R30,188
	ANDI R30,LOW(0x80)
	BREQ _0x3
; 0000 0036 
; 0000 0037 	// check value of TWI Status Register. Mask prescaler bits.
; 0000 0038 	twst = TWSR & 0xF8;
	RCALL SUBOPT_0x0
; 0000 0039 	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
	CPI  R17,8
	BREQ _0x7
	CPI  R17,16
	BRNE _0x8
_0x7:
	RJMP _0x6
_0x8:
	LDI  R30,LOW(1)
	RJMP _0x2000001
; 0000 003A 
; 0000 003B 	// send device address
; 0000 003C 	TWDR = address;
_0x6:
	RCALL SUBOPT_0x1
; 0000 003D 	TWCR = (1<<TWINT) | (1<<TWEN);
; 0000 003E 
; 0000 003F 	// wail until transmission completed and ACK/NACK has been received
; 0000 0040 	while(!(TWCR & (1<<TWINT)));
_0x9:
	LDS  R30,188
	ANDI R30,LOW(0x80)
	BREQ _0x9
; 0000 0041 
; 0000 0042 	// check value of TWI Status Register. Mask prescaler bits.
; 0000 0043 	twst = TWSR & 0xF8;
	RCALL SUBOPT_0x0
; 0000 0044 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	CPI  R17,24
	BREQ _0xD
	CPI  R17,72
	BRNE _0xE
_0xD:
	RJMP _0xC
_0xE:
	LDI  R30,LOW(1)
	RJMP _0x2000001
; 0000 0045 
; 0000 0046 	return 0;
_0xC:
	RJMP _0x2000002
; 0000 0047 
; 0000 0048 }/* i2c_start */
; .FEND
;
;void i2c_start_wait(unsigned char address)
; 0000 004B {
; 0000 004C     char twst;
; 0000 004D 
; 0000 004E 
; 0000 004F     while ( 1 )
;	address -> R16
;	twst -> R17
; 0000 0050     {
; 0000 0051         // send START condition
; 0000 0052         TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
; 0000 0053 
; 0000 0054         // wait until transmission completed
; 0000 0055         while(!(TWCR & (1<<TWINT)));
; 0000 0056 
; 0000 0057         // check value of TWI Status Register. Mask prescaler bits.
; 0000 0058         twst = TWSR & 0xF8;
; 0000 0059         if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
; 0000 005A 
; 0000 005B         // send device address
; 0000 005C         TWDR = address;
; 0000 005D         TWCR = (1<<TWINT) | (1<<TWEN);
; 0000 005E 
; 0000 005F         // wail until transmission completed
; 0000 0060         while(!(TWCR & (1<<TWINT)));
; 0000 0061 
; 0000 0062         // check value of TWI Status Register. Mask prescaler bits.
; 0000 0063         twst = TWSR & 0xF8;
; 0000 0064         if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MT_DATA_NACK) )
; 0000 0065         {
; 0000 0066             /* device busy, send stop condition to terminate write operation */
; 0000 0067             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
; 0000 0068 
; 0000 0069             // wait until stop condition is executed and bus released
; 0000 006A             while(TWCR & (1<<TWSTO));
; 0000 006B 
; 0000 006C             continue;
; 0000 006D         }
; 0000 006E         //if( twst != TW_MT_SLA_ACK) return 1;
; 0000 006F         break;
; 0000 0070      }
; 0000 0071 
; 0000 0072 }/* i2c_start_wait */
;
;
;/*************************************************************************
; Issues a repeated start condition and sends address and transfer direction
; Input:   address and transfer direction of I2C device
;
; Return:  0 device accessible
;          1 failed to access device
;*************************************************************************/
;unsigned char i2c_rep_start(unsigned char address)
; 0000 007D {
; 0000 007E     return i2c_start( address );
;	address -> R17
; 0000 007F 
; 0000 0080 }/* i2c_rep_start */
;
;
;/*************************************************************************
; Terminates the data transfer and releases the I2C bus
;*************************************************************************/
;void i2c_stop(void)
; 0000 0087 {
_i2c_stop:
; .FSTART _i2c_stop
; 0000 0088     /* send stop condition */
; 0000 0089     TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	LDI  R30,LOW(148)
	STS  188,R30
; 0000 008A 
; 0000 008B     // wait until stop condition is executed and bus released
; 0000 008C     while(TWCR & (1<<TWSTO));
_0x21:
	LDS  R30,188
	ANDI R30,LOW(0x10)
	BRNE _0x21
; 0000 008D 
; 0000 008E }/* i2c_stop */
	RET
; .FEND
;
;
;/*************************************************************************
;  Send one byte to I2C device
;
;  Input:    byte to be transfered
;  Return:   0 write successful
;            1 write failed
;*************************************************************************/
;unsigned char i2c_write( unsigned char data )
; 0000 0099 {
_i2c_write:
; .FSTART _i2c_write
; 0000 009A     char   twst;
; 0000 009B 
; 0000 009C 	// send data to the previously addressed device
; 0000 009D 	TWDR = data;
	ST   -Y,R17
	ST   -Y,R16
	MOV  R16,R26
;	data -> R16
;	twst -> R17
	RCALL SUBOPT_0x1
; 0000 009E 	TWCR = (1<<TWINT) | (1<<TWEN);
; 0000 009F 
; 0000 00A0 	// wait until transmission completed
; 0000 00A1 	while(!(TWCR & (1<<TWINT)));
_0x24:
	LDS  R30,188
	ANDI R30,LOW(0x80)
	BREQ _0x24
; 0000 00A2 
; 0000 00A3 	// check value of TWI Status Register. Mask prescaler bits
; 0000 00A4 	twst = TWSR & 0xF8;
	RCALL SUBOPT_0x0
; 0000 00A5 	if( twst != TW_MT_DATA_ACK) return 1;
	CPI  R17,40
	BREQ _0x27
	LDI  R30,LOW(1)
	RJMP _0x2000001
; 0000 00A6 	return 0;
_0x27:
_0x2000002:
	LDI  R30,LOW(0)
_0x2000001:
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0000 00A7 
; 0000 00A8 }/* i2c_write */
; .FEND
;
;
;/*************************************************************************
; Read one byte from the I2C device, request more data from device
;
; Return:  byte read from I2C device
;*************************************************************************/
;unsigned char i2c_readAck(void)
; 0000 00B1 {
; 0000 00B2 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
; 0000 00B3 	while(!(TWCR & (1<<TWINT)));
; 0000 00B4 
; 0000 00B5     return TWDR;
; 0000 00B6 
; 0000 00B7 }/* i2c_readAck */
;
;
;/*************************************************************************
; Read one byte from the I2C device, read is followed by a stop condition
;
; Return:  byte read from I2C device
;*************************************************************************/
;unsigned char i2c_readNak(void)
; 0000 00C0 {
; 0000 00C1 	TWCR = (1<<TWINT) | (1<<TWEN);
; 0000 00C2 	while(!(TWCR & (1<<TWINT)));
; 0000 00C3 
; 0000 00C4     return TWDR;
; 0000 00C5 
; 0000 00C6 }/* i2c_readNak */
;
;void initDisplay()
; 0000 00C9 {
_initDisplay:
; .FSTART _initDisplay
; 0000 00CA     i2c_start(addr);
	LDI  R26,LOW(60)
	RCALL _i2c_start
; 0000 00CB 
; 0000 00CC     i2c_write(0xAE);          // 0xAE // display off
	LDI  R26,LOW(174)
	RCALL _i2c_write
; 0000 00CD     i2c_write(0xD5);          // 0xD5 // set display clock division
	LDI  R26,LOW(213)
	RCALL _i2c_write
; 0000 00CE     i2c_write(0x80);          // the suggested ratio 0x80
	LDI  R26,LOW(128)
	RCALL _i2c_write
; 0000 00CF     i2c_write(0xA8);          // 0xA8 set multiplex
	LDI  R26,LOW(168)
	RCALL _i2c_write
; 0000 00D0     i2c_write(63);            // set height
	LDI  R26,LOW(63)
	RCALL _i2c_write
; 0000 00D1     i2c_write(0xD3);          // set display offset
	LDI  R26,LOW(211)
	RCALL _i2c_write
; 0000 00D2     i2c_write(0x0);           // no offset
	LDI  R26,LOW(0)
	RCALL _i2c_write
; 0000 00D3     i2c_write(64);            // line #0 setstartline
	LDI  R26,LOW(64)
	RCALL _i2c_write
; 0000 00D4     i2c_write(0x8D);          // 0x8D // chargepump
	LDI  R26,LOW(141)
	RCALL _i2c_write
; 0000 00D5     i2c_write(0x14);
	LDI  R26,LOW(20)
	RCALL _i2c_write
; 0000 00D6     i2c_write(0x20);          // memory mode
	LDI  R26,LOW(32)
	RCALL _i2c_write
; 0000 00D7     i2c_write(0x00);          // 0x0 act like ks0108
	LDI  R26,LOW(0)
	RCALL _i2c_write
; 0000 00D8     i2c_write(161);           // segremap
	LDI  R26,LOW(161)
	RCALL _i2c_write
; 0000 00D9     i2c_write(0xC8);          // comscandec
	LDI  R26,LOW(200)
	RCALL _i2c_write
; 0000 00DA     i2c_write(0xDA);          // 0xDA set com pins
	LDI  R26,LOW(218)
	RCALL _i2c_write
; 0000 00DB     i2c_write(0x12);
	LDI  R26,LOW(18)
	RCALL _i2c_write
; 0000 00DC     i2c_write(0x81);          // 0x81 // set contract
	LDI  R26,LOW(129)
	RCALL _i2c_write
; 0000 00DD     i2c_write(0xCF);
	LDI  R26,LOW(207)
	RCALL _i2c_write
; 0000 00DE     i2c_write(0xD9);          // 0xd9 set pre-charge
	LDI  R26,LOW(217)
	RCALL _i2c_write
; 0000 00DF     i2c_write(0xF1);
	LDI  R26,LOW(241)
	RCALL _i2c_write
; 0000 00E0     i2c_write(0xDB);          // SSD1306_SETVCOMDETECT
	LDI  R26,LOW(219)
	RCALL _i2c_write
; 0000 00E1     i2c_write(0x40);
	LDI  R26,LOW(64)
	RCALL _i2c_write
; 0000 00E2     i2c_write(0xA4);          // 0xA4 // display all on resume
	LDI  R26,LOW(164)
	RCALL _i2c_write
; 0000 00E3     i2c_write(0xA6);          // 0xA6 // normal display
	LDI  R26,LOW(166)
	RCALL _i2c_write
; 0000 00E4     i2c_write(0x2E);          // deactivate scroll
	LDI  R26,LOW(46)
	RCALL _i2c_write
; 0000 00E5     i2c_write(0xAF);          // --turn on oled panel
	LDI  R26,LOW(175)
	RCALL _i2c_write
; 0000 00E6 
; 0000 00E7     i2c_stop();
	RCALL _i2c_stop
; 0000 00E8 }
	RET
; .FEND
;
;void drawPixel()
; 0000 00EB {
_drawPixel:
; .FSTART _drawPixel
; 0000 00EC     int i;
; 0000 00ED     int z=0;
; 0000 00EE     i2c_start( addr );
	RCALL __SAVELOCR4
;	i -> R16,R17
;	z -> R18,R19
	__GETWRN 18,19,0
	LDI  R26,LOW(60)
	RCALL _i2c_start
; 0000 00EF 
; 0000 00F0     i2c_write(0x21);          // column address
	LDI  R26,LOW(33)
	RCALL _i2c_write
; 0000 00F1     i2c_write(0);             // Column start address (0 = reset)
	LDI  R26,LOW(0)
	RCALL _i2c_write
; 0000 00F2     i2c_write(127);           // Column end address (127
	LDI  R26,LOW(127)
	RCALL _i2c_write
; 0000 00F3     i2c_write(0x22);          // page address
	LDI  R26,LOW(34)
	RCALL _i2c_write
; 0000 00F4     i2c_write(0x00);          // Page start address (0 = reset)
	LDI  R26,LOW(0)
	RCALL _i2c_write
; 0000 00F5     i2c_write(7);             // Page end address
	LDI  R26,LOW(7)
	RCALL _i2c_write
; 0000 00F6 
; 0000 00F7 
; 0000 00F8 
; 0000 00F9     for ( i = 0; i < ( 128 * 64 / 8 ); i++ )
	__GETWRN 16,17,0
_0x2F:
	__CPWRN 16,17,1024
	BRGE _0x30
; 0000 00FA     {
; 0000 00FB         if ( z == 0 )
	MOV  R0,R18
	OR   R0,R19
	BRNE _0x31
; 0000 00FC         {
; 0000 00FD             i2c_write( 0xff );
	LDI  R26,LOW(255)
	RCALL _i2c_write
; 0000 00FE             z = 1;
	__GETWRN 18,19,1
; 0000 00FF         }
; 0000 0100         else
	RJMP _0x32
_0x31:
; 0000 0101         {
; 0000 0102             i2c_write( 0x00 );
	LDI  R26,LOW(0)
	RCALL _i2c_write
; 0000 0103             z = 0;
	__GETWRN 18,19,0
; 0000 0104         }
_0x32:
; 0000 0105     }
	__ADDWRN 16,17,1
	RJMP _0x2F
_0x30:
; 0000 0106 
; 0000 0107     i2c_stop();
	RCALL _i2c_stop
; 0000 0108 }
	RCALL __LOADLOCR4
	ADIW R28,4
	RET
; .FEND
;
;
;void main(void)
; 0000 010C {
_main:
; .FSTART _main
; 0000 010D  i2c_init();
	RCALL _i2c_init
; 0000 010E while (1)
_0x33:
; 0000 010F       {
; 0000 0110 
; 0000 0111       initDisplay();
	RCALL _initDisplay
; 0000 0112       drawPixel();
	RCALL _drawPixel
; 0000 0113       }
	RJMP _0x33
; 0000 0114 }
_0x36:
	RJMP _0x36
; .FEND

	.CSEG
;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x0:
	LDS  R30,185
	ANDI R30,LOW(0xF8)
	MOV  R17,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1:
	STS  187,R16
	LDI  R30,LOW(132)
	STS  188,R30
	RET

;RUNTIME LIBRARY

	.CSEG
__SAVELOCR4:
	ST   -Y,R19
__SAVELOCR3:
	ST   -Y,R18
__SAVELOCR2:
	ST   -Y,R17
	ST   -Y,R16
	RET

__LOADLOCR4:
	LDD  R19,Y+3
__LOADLOCR3:
	LDD  R18,Y+2
__LOADLOCR2:
	LDD  R17,Y+1
	LD   R16,Y
	RET

	.equ __i2c_dir_scl=__i2c_port-1
	.equ __i2c_pin_scl=__i2c_port-2
	.equ __i2c_dir_sda=__i2c_port-1
	.equ __i2c_pin_sda=__i2c_port-2

_i2c_init:
	cbi  __i2c_port_scl,__scl_bit
	cbi  __i2c_port_sda,__sda_bit
	sbi  __i2c_dir_scl,__scl_bit
	cbi  __i2c_dir_sda,__sda_bit
	rjmp __i2c_delay2

_i2c_start:
	cbi  __i2c_dir_sda,__sda_bit
	cbi  __i2c_dir_scl,__scl_bit
	clr  r30
	nop
	sbis __i2c_pin_sda,__sda_bit
	ret
	sbis __i2c_pin_scl,__scl_bit
	ret
	rcall __i2c_delay1
	sbi  __i2c_dir_sda,__sda_bit
	rcall __i2c_delay1
	sbi  __i2c_dir_scl,__scl_bit
	ldi  r30,1
__i2c_delay1:
	ldi  r22,10
	rjmp __i2c_delay2l

_i2c_stop:
	sbi  __i2c_dir_sda,__sda_bit
	sbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay2
	cbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir_sda,__sda_bit
__i2c_delay2:
	ldi  r22,20
__i2c_delay2l:
	dec  r22
	brne __i2c_delay2l
	ret

_i2c_read:
	ldi  r23,8
__i2c_read0:
	cbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay1
__i2c_read3:
	sbis __i2c_pin_scl,__scl_bit
	rjmp __i2c_read3
	rcall __i2c_delay1
	clc
	sbic __i2c_pin_sda,__sda_bit
	sec
	sbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay2
	rol  r30
	dec  r23
	brne __i2c_read0
	tst  r26
	brne __i2c_read1
	cbi  __i2c_dir_sda,__sda_bit
	rjmp __i2c_read2
__i2c_read1:
	sbi  __i2c_dir_sda,__sda_bit
__i2c_read2:
	rcall __i2c_delay1
	cbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay2
	sbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir_sda,__sda_bit
	rjmp __i2c_delay1

_i2c_write:
	ldi  r23,8
__i2c_write0:
	lsl  r26
	brcc __i2c_write1
	cbi  __i2c_dir_sda,__sda_bit
	rjmp __i2c_write2
__i2c_write1:
	sbi  __i2c_dir_sda,__sda_bit
__i2c_write2:
	rcall __i2c_delay2
	cbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay1
__i2c_write3:
	sbis __i2c_pin_scl,__scl_bit
	rjmp __i2c_write3
	rcall __i2c_delay1
	sbi  __i2c_dir_scl,__scl_bit
	dec  r23
	brne __i2c_write0
	cbi  __i2c_dir_sda,__sda_bit
	rcall __i2c_delay1
	cbi  __i2c_dir_scl,__scl_bit
	rcall __i2c_delay2
	ldi  r30,1
	sbic __i2c_pin_sda,__sda_bit
	clr  r30
	sbi  __i2c_dir_scl,__scl_bit
	rjmp __i2c_delay1

;END OF CODE MARKER
__END_OF_CODE:
